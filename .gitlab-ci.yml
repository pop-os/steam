# Copyright Â© 2019-2021 Collabora Ltd.
#
# SPDX-License-Identifier: MIT

variables:
    DEVEL_IMAGE: registry.gitlab.steamos.cloud/steamrt/soldier/sdk
    SCOUT_IMAGE: registry.gitlab.steamos.cloud/steamrt/scout/sdk
    SCOUT_IMAGE_I386: registry.gitlab.steamos.cloud/steamrt/scout/sdk/i386

    # Variables to be configured in Gitlab-CI group or project:

    # dev-tools project used to upload artifacts, in format group/project
    STEAM_LAUNCHER_CI_DEV_TOOLS: ''
    # PGP key used to sign apt repository
    STEAM_LAUNCHER_CI_SIGNING_KEY_ID: ''
    # Public keys of server used to upload releases
    STEAM_LAUNCHER_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE: ''
    # ssh key used to upload releases
    STEAM_LAUNCHER_CI_UPLOAD_SSH_PRIVATE_KEY_FILE: ''

    # Optional variables for development/testing:

    # Client manifest to use instead of steam_client_ubuntu12, or empty
    # Probably the only other value that's useful is
    # steam_client_publicbeta_ubuntu12
    STEAM_LAUNCHER_CI_CLIENT_MANIFEST: ''
    # URI to a tarball with client/ubuntu12_32/steam etc., or empty
    STEAM_LAUNCHER_CI_CLIENT_TARBALL_URI: ''
    # If non-empty, override Steam client CDN base URL
    STEAM_LAUNCHER_CI_CLIENT_URI: ''
    # username:password for downloading from STEAM_LAUNCHER_CI_DOWNLOAD_HOST,
    # or empty
    STEAM_LAUNCHER_CI_DOWNLOAD_CREDS: ''
    # https hostname to use STEAM_LAUNCHER_CI_DOWNLOAD_CREDS on, or empty
    STEAM_LAUNCHER_CI_DOWNLOAD_HOST: ''
    # If non-empty, download Steam Runtime from here
    # https://.../steamrt-scout/snapshots
    STEAM_LAUNCHER_CI_RUNTIME_SNAPSHOTS_URI: ''
    # If non-empty, use this Steam Runtime version instead of the one in Steam
    # e.g. 0.20211022.0 or latest-steam-client-general-availability
    STEAM_LAUNCHER_CI_RUNTIME_SNAPSHOTS_URI: ''

stages:
    - prepare
    - build
    - test
    - deploy

default:
    image: "${DEVEL_IMAGE}"
    interruptible: true

prepare:
    stage: prepare
    tags:
        - docker
        - linux
    script:
        - |
            set -eux

            export DEBIAN_FRONTEND=noninteractive
            apt-get -y update
            apt-get -y install dh-python

            mkdir -p _build
            git archive --prefix=steam-launcher/ HEAD | tar -C _build -xf-
            cd _build/steam-launcher

            ./buildutils/add-client-files.py \
                ${STEAM_LAUNCHER_CI_DOWNLOAD_HOST:+--client-manifest="${STEAM_LAUNCHER_CI_DOWNLOAD_HOST}:STEAM_LAUNCHER_CI_DOWNLOAD_CREDS"} \
                ${STEAM_LAUNCHER_CI_CLIENT_MANIFEST:+--client-manifest="${STEAM_LAUNCHER_CI_CLIENT_MANIFEST}"} \
                ${STEAM_LAUNCHER_CI_CLIENT_TARBALL_URI:+--client-tarball-uri="${STEAM_LAUNCHER_CI_CLIENT_TARBALL_URI}"} \
                ${STEAM_LAUNCHER_CI_CLIENT_URI:+--client-uri="${STEAM_LAUNCHER_CI_CLIENT_URI}"} \
                ${STEAM_LAUNCHER_CI_RUNTIME_SNAPSHOTS_URI:+--runtime-version="${STEAM_LAUNCHER_CI_RUNTIME_SNAPSHOTS_URI}"} \
                ${STEAM_LAUNCHER_CI_RUNTIME_VERSION:+--runtime-version="${STEAM_LAUNCHER_CI_RUNTIME_VERSION}"} \
                ${NULL+}

            if [ -n "${CI_COMMIT_TAG-}" ]; then
                # Assert that the current commit is at a suitable tag
                deb-git-version-gen --release --upstream
            else
                # Update the changelog for a snapshot
                deb-git-version-gen --dch --upstream
                sed -i -e "1s/)/+ci0.${CI_PIPELINE_ID})/" debian/changelog
            fi

            make -f debian/rules build
            make check
            make clean

    artifacts:
        paths:
            - _build/steam-launcher/
        when: on_success

package:amd64:
    stage: build
    image: "${SCOUT_IMAGE}"
    tags:
        - docker
        - linux
    needs:
        - prepare
    artifacts:
        paths:
            - _build/*.changes
            - _build/*.deb
            - _build/*.dsc
            - _build/*.tar.*
        when: on_success
    script:
        - |
            set -eux
            cd _build/steam-launcher/

            # -F is equivalent to --build=any,all,source (but old versions
            # of dpkg don't have that). It's the default, but explicit is
            # better than implicit
            dpkg-buildpackage -F -us -uc

package:i386:
    stage: build
    image: "${SCOUT_IMAGE_I386}"
    tags:
        - docker
        - linux
    needs:
        - prepare
    artifacts:
        paths:
            - _build/*.changes
            - _build/*.deb
        when: on_success
    script:
        - |
            set -eux
            cd _build/steam-launcher/

            # -B is equivalent to --build=any (but old versions
            # of dpkg don't have that)
            dpkg-buildpackage -B -ai386 -us -uc

.test_dependencies: &test_dependencies
    - |
        set -eux

        apt-get -y update
        apt-get -y upgrade
        apt-get -y --no-install-recommends install \
        python3-apt \
        software-properties-common \
        ${NULL+}

.test_template:
    stage: test
    tags:
        - docker
        - linux
    # We can start running these tests even before we do the prepare step.
    # At the moment the only tests we run are for bin_steamdeps.py, which
    # doesn't need the files from the prepare step, and doesn't need a
    # built .deb either.
    needs: []

.test_debian_common: &test_debian_common
    - |
        set -eux

        apt-add-repository contrib
        apt-add-repository non-free
        apt-get -y update

        # Prevent keyboard-configuration to ask for an interactive input
        export DEBIAN_FRONTEND=noninteractive

        apt-get -y --no-install-recommends install nvidia-driver-libs
        export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL}"
        export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
        # We don't have the i386 architecture enabled
        export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} nvidia-driver-libs:i386"
        export SL_TEST_NVIDIA_VERSION="001.123"
        python3 tests/bin_steamdeps.py

        apt-get remove -y nvidia-driver-libs nvidia-alternative
        apt-get -y --no-install-recommends install nvidia-legacy-390xx-driver-libs
        # We don't have the i386 architecture enabled
        export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} nvidia-legacy-390xx-driver-libs:i386"
        export SL_TEST_NVIDIA_VERSION="390.144"
        python3 tests/bin_steamdeps.py

        apt-get remove -y nvidia-legacy-390xx-driver-libs nvidia-legacy-390xx-alternative


test:debian-11:
    extends: .test_template
    image: debian:11-slim
    variables:
        EXPECTED_MISSING_PKGS: >-
            steam-libs-amd64:amd64
            steam-libs-i386:i386

        EXPECTED_PKGS_TO_INSTALL: >-
            bubblewrap
            xdg-desktop-portal
            xdg-desktop-portal-gtk

    script:
        - *test_dependencies
        - *test_debian_common
        - |
            set -eux

            apt-get -y --no-install-recommends install nvidia-legacy-390xx-driver-libs \
            nvidia-tesla-418-alternative
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} nvidia-tesla-418-driver-libs:amd64"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} nvidia-tesla-418-driver-libs:i386"
            export SL_TEST_NVIDIA_VERSION="418.211"
            python3 tests/bin_steamdeps.py

            # We should not be prompted to install the 418 tesla drivers because
            # the loaded Nvidia kernel module version is unknown
            export SL_TEST_NVIDIA_VERSION="001.123.45"
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL}"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS}"
            export SL_TEST_OUTPUT_MESSAGE="Unable to determine whether the expected Nvidia drivers are available."
            python3 tests/bin_steamdeps.py

            dpkg --add-architecture i386
            apt-get -y update

            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1:i386 libgl1-mesa-dri:i386 nvidia-tesla-418-driver-libs:amd64 nvidia-tesla-418-driver-libs:i386"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_OUTPUT_MESSAGE=
            export SL_TEST_NVIDIA_VERSION="418.211"
            python3 tests/bin_steamdeps.py

            apt-get -y remove nvidia-tesla-418-alternative \
            nvidia-legacy-390xx-driver-libs \
            nvidia-legacy-390xx-alternative
            apt-get -y --no-install-recommends install nvidia-driver-libs:amd64
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1:i386 libgl1-mesa-dri:i386 nvidia-driver-libs:i386"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_NVIDIA_VERSION="001.123"
            python3 tests/bin_steamdeps.py

test:debian-10:
    extends: .test_template
    image: debian:10-slim
    variables:
        EXPECTED_MISSING_PKGS: >-
            steam-libs-amd64:amd64
            steam-libs-i386:i386

        EXPECTED_PKGS_TO_INSTALL: >-
            bubblewrap
            xdg-desktop-portal
            xdg-desktop-portal-gtk
    script:
        - *test_dependencies
        - *test_debian_common
        - |
            set -eux

            apt-get -y --no-install-recommends install nvidia-legacy-390xx-driver-libs \
            nvidia-legacy-340xx-alternative
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} nvidia-legacy-340xx-driver-libs:amd64"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} nvidia-legacy-340xx-driver-libs:i386"
            export SL_TEST_NVIDIA_VERSION="340.108"
            python3 tests/bin_steamdeps.py

            # We should not be prompted to install the 340 legacy drivers because
            # the loaded Nvidia kernel module version is unknown
            export SL_TEST_NVIDIA_VERSION="001.123.45"
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL}"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS}"
            python3 tests/bin_steamdeps.py

            dpkg --add-architecture i386
            apt-get -y update

            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1:i386 libgl1-mesa-dri:i386 nvidia-legacy-340xx-driver-libs:amd64 nvidia-legacy-340xx-driver-libs:i386"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_NVIDIA_VERSION="340.108"
            python3 tests/bin_steamdeps.py

            apt-get -y remove nvidia-legacy-340xx-alternative \
            nvidia-legacy-390xx-driver-libs \
            nvidia-legacy-390xx-alternative
            apt-get -y --no-install-recommends install nvidia-driver-libs:amd64
            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1:i386 libgl1-mesa-dri:i386 nvidia-driver-libs:i386"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libegl1:amd64 libgbm1:amd64 libgl1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_NVIDIA_VERSION="001.123"
            python3 tests/bin_steamdeps.py

.test_ubuntu_common: &test_ubuntu_common
    - |
        set -eux

        apt-get -y --no-install-recommends install libnvidia-gl-390
        export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL}"
        export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64"
        # We don't have the i386 architecture enabled
        export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} libnvidia-gl-390:i386"
        export SL_TEST_NVIDIA_VERSION="390.144"
        python3 tests/bin_steamdeps.py

        apt-get -y --no-install-recommends install libnvidia-gl-418-server
        # We don't have the i386 architecture enabled
        export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS} libnvidia-gl-418-server:i386"
        export SL_TEST_NVIDIA_VERSION="418.211.00"
        python3 tests/bin_steamdeps.py

        dpkg --add-architecture i386
        apt-get -y update

        export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1-mesa-dri:i386 libgl1:i386 libnvidia-gl-418-server:i386"
        export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64"
        export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS}"
        python3 tests/bin_steamdeps.py

        apt-get -y --no-install-recommends install libnvidia-gl-470
        export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL} libc6:i386 libegl1:i386 libgbm1:i386 libgl1-mesa-dri:i386 libgl1:i386 libnvidia-gl-470:i386"
        export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64"
        export SL_TEST_NVIDIA_VERSION="470.63.01"
        python3 tests/bin_steamdeps.py

test:ubuntu-18.04:
    extends: .test_template
    image: ubuntu:18.04
    variables:
        EXPECTED_MISSING_PKGS: >-
            steam-libs-amd64:amd64
            steam-libs-i386:i386

        EXPECTED_PKGS_TO_INSTALL: >-
            libegl1:amd64
            libgbm1:amd64
            libgl1-mesa-dri:amd64
            libgl1:amd64
            xdg-desktop-portal
            xdg-desktop-portal-gtk
    script:
        - *test_dependencies
        - *test_ubuntu_common

test:ubuntu-20.04:
    extends: .test_template
    image: ubuntu:20.04
    variables:
        EXPECTED_MISSING_PKGS: >-
            steam-libs-amd64:amd64
            steam-libs-i386:i386

        EXPECTED_PKGS_TO_INSTALL: >-
            libegl1:amd64
            libgbm1:amd64
            libgl1-mesa-dri:amd64
            libgl1:amd64
            xdg-desktop-portal
            xdg-desktop-portal-gtk
    script:
        - *test_dependencies
        - *test_ubuntu_common

test:ubuntu-14.04:
    extends: .test_template
    image: ubuntu:14.04
    variables:
        EXPECTED_MISSING_PKGS: >-
            steam-libs-amd64:amd64
            steam-libs-i386:i386

        EXPECTED_PKGS_TO_INSTALL: >-
            libegl1-mesa:amd64
            libgbm1:amd64
            libgl1-mesa-dri:amd64
            libgl1-mesa-glx:amd64
    script:
        - *test_dependencies
        - |
            set -eux

            export SL_TEST_PKGS_TO_INSTALL="${EXPECTED_PKGS_TO_INSTALL}"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64"
            export SL_TEST_MISSING_PKGS="${EXPECTED_MISSING_PKGS}"
            python3 tests/bin_steamdeps.py

            apt-get -y --no-install-recommends install nvidia-384
            export SL_TEST_PKGS_TO_INSTALL="libegl1-mesa:amd64 libgbm1:amd64 libgl1-mesa-dri:amd64"
            export SL_TEST_REQUIRED_PKGS="${SL_TEST_PKGS_TO_INSTALL} libc6:amd64 libgl1-mesa-glx:amd64"
            export SL_TEST_NVIDIA_VERSION="384.130"
            export SL_TEST_OUTPUT_MESSAGE="Unable to determine whether the expected Nvidia drivers are available."
            python3 tests/bin_steamdeps.py

deploy:
    stage: deploy
    tags:
        - docker
        - linux
    # Deliberately using dependencies: instead of needs: here so that
    # the job only runs after tests have completed, even though it doesn't
    # need the artifacts from the tests
    dependencies:
        - package:amd64
        - package:i386
    rules:
        # Don't release anything without the prerequisites. In practice
        # this means only protected branches will have this stage.
        - if: '$STEAM_LAUNCHER_CI_DEV_TOOLS == ""'
          when: never
        - if: '$STEAM_LAUNCHER_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE == ""'
          when: never
        - if: '$STEAM_LAUNCHER_CI_UPLOAD_SSH_PRIVATE_KEY_FILE == ""'
          when: never
        - if: '$STEAM_LAUNCHER_CI_SIGNING_KEY_ID == ""'
          when: never

        # Release tagged releases to the beta apt repo
        - if: '$CI_COMMIT_TAG'
          when: always
        # Release each commit to master/main branch to the internal
        # "playground" apt repo
        - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
          when: always
        # For testing/development (mark your branch as protected but
        # still allowing force-push)
        - when: manual
    script:
        - |
            set -eux

            if ! [ -f "$STEAM_LAUNCHER_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE" ]; then
                echo "S_L_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE must be of type File" >&2
                exit 1
            fi
            if ! [ -f "$STEAM_LAUNCHER_CI_UPLOAD_SSH_PRIVATE_KEY_FILE" ]; then
                echo "S_L_CI_UPLOAD_SSH_PRIVATE_KEY_FILE must be of type File" >&2
                exit 1
            fi
            tmpdir="$(mktemp -d)"
            # Gitlab-CI "File" variables have DOS line endings, and ssh
            # doesn't allow those in public key files.
            touch "$tmpdir/ssh-key"
            chmod 0600 "$tmpdir/ssh-key"
            tr -d '\r' < "$STEAM_LAUNCHER_CI_UPLOAD_SSH_PRIVATE_KEY_FILE" > "$tmpdir/ssh-key"

            export DEBIAN_FRONTEND=noninteractive
            apt-get -y update
            apt-get -y install openssh-client

            for x in _build/*.changes; do debc "$x" || true; done

            git clone \
            https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${STEAM_LAUNCHER_CI_DEV_TOOLS}.git \
            dev-tools

            if [ -n "${CI_COMMIT_TAG-}" ]; then
                CI_UNOFFICIAL=
            else
                CI_UNOFFICIAL=unofficial
            fi

            for x in _build/*.changes; do
                PYTHONUNBUFFERED=1 \
                dev-tools/promote-apt/promote-apt.py \
                    ${CI_UNOFFICIAL:+--playground} \
                    --archive archive/beta \
                    --archive archive/precise \
                    --confdir dev-tools/steam-launcher/repo/conf \
                    --include "$x" \
                    --mode export \
                    --ssh-known-hosts "${STEAM_LAUNCHER_CI_UPLOAD_HOST_SSH_PUBLIC_KEYS_FILE}" \
                    --ssh-private-key "$tmpdir/ssh-key" \
                    --signing-key-id "${STEAM_LAUNCHER_CI_SIGNING_KEY_ID}" \
                    --vendor steam-launcher \
                    --repository-dir steam-launcher \
                    beta
            done
